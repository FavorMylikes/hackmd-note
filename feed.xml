<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://ucas.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ucas.io/" rel="alternate" type="text/html" /><updated>2021-10-19T23:24:41+08:00</updated><id>https://ucas.io/feed.xml</id><title type="html">Notes B</title><subtitle>A place for notes on various topics.</subtitle><author><name>麦丽素</name></author><entry><title type="html">The Path to Nerf</title><link href="https://ucas.io/3d/The-Path-To-Nerf/" rel="alternate" type="text/html" title="The Path to Nerf" /><published>2021-10-18T14:44:18+08:00</published><updated>2021-10-18T14:44:18+08:00</updated><id>https://ucas.io/3d/The-Path-To-Nerf</id><content type="html" xml:base="https://ucas.io/3d/The-Path-To-Nerf/">&lt;h2 id=&quot;three-tools-to-create-citation-mapping&quot;&gt;Three tools to create citation mapping&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aarontay.medium.com/3-new-tools-to-try-for-literature-mapping-connected-papers-inciteful-and-litmaps-a399f27622a&quot;&gt;3 new tools to try for Literature mapping — Connected Papers, Inciteful and Litmaps - Medium&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.connectedpapers.com/&quot;&gt;Connected Papers&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211018144925.png&quot; alt=&quot;20211018144925&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://inciteful.xyz/&quot;&gt;Inciteful&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211018144807.png&quot; alt=&quot;20211018144807&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.litmaps.co/&quot;&gt;Litmaps🤙&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211018151119.png&quot; alt=&quot;20211018151119&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cocites.com/&quot;&gt;CoCites&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Has chrome extension&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://citationgecko.com/&quot;&gt;Citation Gecko&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Too simple&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211018152955.png&quot; alt=&quot;20211018152955&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.vosviewer.com/&quot;&gt;VOSviewer&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Need data file&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nerf-path-track&quot;&gt;NeRF Path Track&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211019231223.png&quot; alt=&quot;20211019231223&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[2D变3D，视角随意换，神还原高清立体感，还是不用3D建模的那种&lt;/td&gt;
          &lt;td&gt;代码数据开源 - 量子位的文章 - 知乎](https://zhuanlan.zhihu.com/p/128554388)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;perior&quot;&gt;Perior&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Volume Rendering
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56710440&quot;&gt;体渲染数学原理 - 杨超wantnon的文章 - 知乎&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/260540982&quot;&gt;【译】实时体渲染——第一章 体渲染 - Maple的文章 - 知乎&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/1103900.1103929&quot;&gt;Real-Time Volume Graphics&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/SIGGRAPH-2004-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-996-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/964965.808594&quot;&gt;Ray tracing volume densities&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/SIGGRAPH-1984-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-1296-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphics.stanford.edu/papers/light/&quot;&gt;LFR&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://dl.acm.org/doi/10.1145/237170.237199&quot;&gt;Light field rendering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/SIGGRAPH-1996-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-5237-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24982662&quot;&gt;漫谈计算摄影学 (一)：直观理解光场(Light Field) - YE Y的文章 - 知乎&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://raytrix.de/&quot;&gt;Raytrix&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/imgf8abeb4e7d5f1ff2e7d1d38b159cb02.png&quot; alt=&quot;f8abeb4e7d5f1ff2e7d1d38b159cb02&quot; /&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://grail.cs.washington.edu/projects/ldi/&quot;&gt;LDI&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://grail.cs.washington.edu/projects/ldi/&quot;&gt;Layered Depth Images&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/SIGGRAPH-1998-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-1656-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211019151938.png&quot; alt=&quot;20211019151938&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bmild.github.io/llff/&quot;&gt;LLFF&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://bmild.github.io/llff/&quot;&gt;Local Light Field Fusion: Practical View Synthesis with Prescriptive Sampling Guidelines&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/Fyusion/LLFF&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/SIGGRAPH-2019-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-198-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1805.09817&quot;&gt;Stereo Magnification: Learning View Synthesis using Multiplane Images - Google&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://tinghuiz.github.io/projects/mpi/&quot;&gt;Github.io&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/SIGGRAPH-2018-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-275-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211018232827.png&quot; alt=&quot;20211018232827&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Multiplane Images&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;future&quot;&gt;Future&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://openaccess.thecvf.com/content/ICCV2021/html/Li_MINE_Towards_Continuous_Depth_MPI_With_NeRF_for_Novel_View_ICCV_2021_paper.html&quot;&gt;MINE: Towards Continuous Depth MPI With NeRF for Novel View Synthesis - ByteDances&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/ICCV-2021-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-0-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/vincentfung13/MINE&quot;&gt;GithHub&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211019123823.png&quot; alt=&quot;20211019123823&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;[ICCV 2021&lt;/td&gt;
              &lt;td&gt;字节跳动利用单张图片做三维重建：将NeRF、MPI结合，提出MINE - 不爱玩的小玩家的文章 - 知乎](https://zhuanlan.zhihu.com/p/419468401)&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/2004.11364&quot;&gt;MPI: Single-view view synthesis with multiplane images&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://single-view-mpi.github.io/&quot;&gt;Github.io&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/CVPR-2020-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-60-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211019123036.png&quot; alt=&quot;20211019123036&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mesure&quot;&gt;Mesure&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;PSNR
    &lt;ul&gt;
      &lt;li&gt;Peak signal-to-noise ratio, 尖峰信噪比&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211018203024.png&quot; alt=&quot;20211018203024&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SSIM
    &lt;ul&gt;
      &lt;li&gt;Structural similarity&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Structural_similarity&quot;&gt;Wikipidea&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;结构相似性在影像品质的衡量上更能符合人眼对影像品质的判断&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211018202834.png&quot; alt=&quot;20211018202834&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LPIPS
    &lt;ul&gt;
      &lt;li&gt;Learned Perceptual Image Patch Similarity&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/richzhang/PerceptualSimilarity&quot;&gt;git richzhang/PerceptualSimilarity&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦丽素</name></author><category term="3d" /><summary type="html">Three tools to create citation mapping</summary></entry><entry><title type="html">Nerf</title><link href="https://ucas.io/3d/Nerf/" rel="alternate" type="text/html" title="Nerf" /><published>2021-10-14T23:16:43+08:00</published><updated>2021-10-14T23:16:43+08:00</updated><id>https://ucas.io/3d/Nerf</id><content type="html" xml:base="https://ucas.io/3d/Nerf/">&lt;h2 id=&quot;nerf&quot;&gt;Nerf&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Repository&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;spark&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;star&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/yenchenlin/nerf-pytorch&quot;&gt;&lt;img src=&quot;https://github-readme-stats.vercel.app/api/pin/?username=yenchenlin&amp;amp;repo=nerf-pytorch&amp;amp;show_owner=true&quot; alt=&quot;Readme Card&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/yenchenlin/nerf-pytorch&quot;&gt;&lt;img src=&quot;https://stars.medv.io/yenchenlin/nerf-pytorch.svg&quot; alt=&quot;Sparkline&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://starchart.cc/yenchenlin/nerf-pytorch&quot;&gt;&lt;img src=&quot;https://starchart.cc/yenchenlin/nerf-pytorch.svg&quot; width=&quot;200px&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.matthewtancik.com/nerf&quot;&gt;Nerf HomePage&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/ECCV-2020-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-458-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://cseweb.ucsd.edu/~ravir/pratul_eccv20.pdf&quot;&gt;Paper.pdf&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-point&quot;&gt;Key Point&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;输入是位置和视角方向$(x,y,z) + (\theta, \phi)$构成的5D坐标，输出是体积密度和颜色
    &lt;ul&gt;
      &lt;li&gt;Position encoding可以提高细节&lt;/li&gt;
      &lt;li&gt;层次化的采样流程可以减少采样&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volume rendering&lt;/code&gt;实现视图合成&lt;/li&gt;
  &lt;li&gt;全连接网络&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MLP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211014233233.png&quot; alt=&quot;20211014233233&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/noluye/p/14547115.html&quot;&gt;【论文精炼】何雨龙 - cnblogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=CRlN-cYFxTk&quot;&gt;nerf(ML Research Paper Explained) - Youtube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/187541908&quot;&gt;图形学新高潮? NeRF 笔记 - Lee bro的文章 - 知乎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wandb.ai/wandb_fc/chinese/reports/NeRF-Neural-Radiance-Fields-View-Synthesis---VmlldzozNDQxNzk&quot;&gt;NeRF ——使用神经辐射场(Neural Radiance Fields)表示场景来进行视图合成(View Synthesis)🤙&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/360365941&quot;&gt;【NeRF论文笔记】用于视图合成的神经辐射场技术 - 林天威的文章 - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦丽素</name></author><category term="3d" /><summary type="html">Nerf</summary></entry><entry><title type="html">Texture for invisible</title><link href="https://ucas.io/3d/Texture-for-invisible-face/" rel="alternate" type="text/html" title="Texture for invisible" /><published>2021-10-09T11:19:26+08:00</published><updated>2021-10-09T11:19:26+08:00</updated><id>https://ucas.io/3d/Texture-for-invisible-face</id><content type="html" xml:base="https://ucas.io/3d/Texture-for-invisible-face/">&lt;h2 id=&quot;causes-of-no-texture&quot;&gt;Causes of no texture&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bInvisibleFace || bInvisibleFaceAdj == Ture&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211009111851.png&quot; alt=&quot;20211009111851&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bInvisibleFace == True&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211009132134.png&quot; alt=&quot;20211009132134&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211009132157.png&quot; alt=&quot;20211009132157&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mesh问题
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/imgo.gif&quot; alt=&quot;o&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c-tech&quot;&gt;C++ Tech&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.360doc.com/content/19/0212/20/496343_814522118.shtml&quot;&gt;调用约定——_cdecl,_stdcall,_fastcall&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20211009232731.png&quot; alt=&quot;20211009232731&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦丽素</name></author><category term="3d" /><summary type="html">Causes of no texture</summary></entry><entry><title type="html">Cmake Bug</title><link href="https://ucas.io/3d/Cmake-Bug/" rel="alternate" type="text/html" title="Cmake Bug" /><published>2021-10-08T15:56:23+08:00</published><updated>2021-10-08T15:56:23+08:00</updated><id>https://ucas.io/3d/Cmake-Bug</id><content type="html" xml:base="https://ucas.io/3d/Cmake-Bug/">&lt;h2 id=&quot;cmake-can-not-find-openmp&quot;&gt;Cmake can not find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenMP&lt;/code&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Clion(2021.2.2) use the default Cmake version is 3.20.2
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Got following error at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path-to-build/CMakeFiles/CMakeError.log&lt;/code&gt;&lt;/p&gt;

        &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;  -- The C compiler identification is MSVC 19.29.30133.0
  -- The CXX compiler identification is MSVC 19.29  30133.0
  -- Detecting C compiler ABI info
  -- Detecting C compiler ABI info - failed
  -- Check for working C compiler: C:/Program Files  (x86)/Microsoft Visual Studio/2019/BuildTools/VC  Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe
  -- Check for working C compiler: C:/Program Files  (x86)/Microsoft Visual Studio/2019/BuildTools/VC  Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe -  works
  -- Detecting C compile features
  -- Detecting C compile features - done
  -- Detecting CXX compiler ABI info
  -- Detecting CXX compiler ABI info - failed
  -- Check for working CXX compiler: C:/Program  Files (x86)/Microsoft Visual Studio/2019  BuildTools/VC/Tools/MSVC/14.29.30133/bin/Hostx64  x64/cl.exe
  -- Check for working CXX compiler: C:/Program  Files (x86)/Microsoft Visual Studio/2019  BuildTools/VC/Tools/MSVC/14.29.30133/bin/Hostx64  x64/cl.exe - works
  -- Detecting CXX compile features
  -- Detecting CXX compile features - done
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;After a few tests, I have a status table at below, we can follow this &lt;a href=&quot;https://youtrack.jetbrains.com/issue/CPP-26827&quot;&gt;issue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt; &lt;/th&gt;
          &lt;th&gt;PC1[xps]&lt;/th&gt;
          &lt;th&gt;PC2[ucas]&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;clion(cmake 3.20.2)&lt;/td&gt;
          &lt;td&gt;❌&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;cmake 3.21.3&lt;/td&gt;
          &lt;td&gt;❌&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;cmake 3.19.8&lt;/td&gt;
          &lt;td&gt;✅warning(CMAKE_DEPENDS_USE_COMPILER)&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;change clion use cmake 3.19.8, the problem has gone&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-use-openmp&quot;&gt;How to use OpenMp&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Need some attention code at CMakeLists.txt&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;FIND_PACKAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;OpenMP&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_CXX_FLAGS &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_CXX_FLAGS&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OpenMP_CXX_FLAGS&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OMP_NUM_THREADS=4&lt;/code&gt; at env To Control thread num&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-a-simple-example&quot;&gt;Code, A simple example&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;omp.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#pragma omp parallel for private(i)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;omp_get_thread_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/u011089523/article/details/103412177&quot;&gt;OpenMP的简单使用教程 - CSDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dartmouth.edu/~rc/classes/intro_openmp/compile_run.html&quot;&gt;How to Compile and Run an OpenMP Program&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/ArrowYL/article/details/81094837&quot;&gt;OpenMP用法大全（个人整理版）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦丽素</name></author><category term="3d" /><summary type="html">Cmake can not find OpenMP</summary></entry><entry><title type="html">Trangle Rasterization</title><link href="https://ucas.io/3d/Trangle-Rasterization/" rel="alternate" type="text/html" title="Trangle Rasterization" /><published>2021-09-28T17:08:24+08:00</published><updated>2021-09-28T17:08:24+08:00</updated><id>https://ucas.io/3d/Trangle-Rasterization</id><content type="html" xml:base="https://ucas.io/3d/Trangle-Rasterization/">&lt;h2 id=&quot;openmvshomogeneous-coordinate&quot;&gt;OpenMVS[Homogeneous Coordinate]&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://forum.beyond3d.com/threads/advanced-rasterization.12507/&quot;&gt;Advanced Rasterization - Nick 2004&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cs.cmu.edu/afs/cs/academic/class/15869-f11/www/readings/olano97_homogeneous.pdf&quot;&gt;Triangle Scan Conversion using 2D Homogeneous Coordinates - CMU&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/SIGGRAPH-1997-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/EG-1997-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-122-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210929133013.png&quot; alt=&quot;20210929133013&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;line-sweeping线扫法&quot;&gt;Line sweeping[线扫法]&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ssloy/tinyrenderer/wiki/Lesson-2:-Triangle-rasterization-and-back-face-culling&quot;&gt;Triangle-rasterization-and-back-face-culling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210928215359.png&quot; alt=&quot;20210928215359&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;对y排序，从左向右设置像素&lt;/li&gt;
  &lt;li&gt;分两段画完&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;barycentric-coordinates重心坐标系判定法---并行计算中的判定&quot;&gt;Barycentric Coordinates[重心坐标系判定法 - 并行计算中的判定]&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;遍历AABB内的所有点的重心坐标&lt;/li&gt;
  &lt;li&gt;For Convex&lt;/li&gt;
  &lt;li&gt;重心坐标具有仿射不变性&lt;/li&gt;
  &lt;li&gt;As Area coordinates in trangle
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210928223322.png&quot; alt=&quot;20210928223322&quot; height=&quot;200px&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;对于三点$A,B,C$的坐标分别为$\mathbf{a,b,c}$&lt;/li&gt;
      &lt;li&gt;对于任意点$P$的坐标$p$&lt;/li&gt;
      &lt;li&gt;设$S_{\triangle{PBC}}:S_{\triangle{PBC}}:S_{\triangle{PBC}}=\lambda_1:\lambda_2:\lambda_3$&lt;/li&gt;
      &lt;li&gt;$\lambda_1+\lambda_2+\lambda_3=1$&lt;/li&gt;
      &lt;li&gt;延长$AP$交$BC$于$D$&lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;kdmath&quot;&gt;$$
\begin{aligned}
        &amp;\because&amp;BD:DC&amp;=\lambda_3:\lambda_2\\
        &amp;\therefore&amp; \mathbf{d}&amp;=\frac{\lambda_2\mathbf{b}+\lambda_3\mathbf{c}}{\lambda_2+\lambda_3}\\
        &amp;\because&amp;AP:PD&amp;=(\lambda_2+\lambda_3):\lambda_1\\
        &amp;\therefore&amp;\mathbf{p}&amp;=\frac{(\lambda_2+\lambda_3)\mathbf{d}+\lambda_1\mathbf{a}}{\lambda_1+\lambda_2+\lambda_3}\\
        &amp;\therefore&amp;\mathbf{p}&amp;=\lambda_1\mathbf{a}+\lambda_2\mathbf{b}+\lambda_3\mathbf{c}
    \end{aligned}
$$&lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;因此，重心坐标， 也是面积坐标&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;For each pixel we compute its barycentric coordinates. &lt;strong&gt;If it has at least one negative component&lt;/strong&gt;, then the pixel is outside of the triangle.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;点在三角形内的问题转换为求解重心坐标
    &lt;ul&gt;
      &lt;li&gt;面积法
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div class=&quot;kdmath&quot;&gt;$$
\lambda_1=\frac{S_{\triangle{PBC}}}{S_{\triangle{ABC}}}=\frac{\begin{vmatrix}
      1&amp;x_p&amp;y_p\\
      1&amp;x_b&amp;y_b\\
      1&amp;x_c&amp;y_c\\
  \end{vmatrix}}{\begin{vmatrix}
      1&amp;x_a&amp;y_a\\
      1&amp;x_b&amp;y_b\\
      1&amp;x_c&amp;y_c\\
  \end{vmatrix}}
$$&lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;其中&lt;/li&gt;
          &lt;li&gt;
            &lt;div class=&quot;kdmath&quot;&gt;$$
S_{\triangle_{ABC}}=\frac{1}{2}\begin{vmatrix}
      1&amp;x_a&amp;y_a\\
      1&amp;x_b&amp;y_b\\
      1&amp;x_c&amp;y_c\\
  \end{vmatrix}
$$&lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;代数法
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div class=&quot;kdmath&quot;&gt;$$
\begin{cases}
      \lambda_1x_a+\lambda_2x_b+\lambda_3x_c&amp;=x_p\\
      \lambda_1y_a+\lambda_2y_b+\lambda_3y_c&amp;=y_p\\
      \lambda_1+\lambda_2+\lambda_3&amp;=1\\
  \end{cases}
$$&lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linear-edge-function-line-sweeping线边法&quot;&gt;Linear Edge Function, Line sweeping[线边法]&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/54852.378457&quot;&gt;A parallel algorithm for polygon rasterization&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/SIGGRAPH-1988-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-295-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cs.drexel.edu/~david/Classes/Papers/comp175-06-pineda.pdf&quot;&gt;Paper.pdf&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;主要描述线扫法和并行计算中对多边形的填充设计&lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;kdmath&quot;&gt;$$
\begin{aligned}
        dX_i &amp;= X_i - X_{i-1}\\
        dY_i &amp;= Y_i - Y_{i-1}\\
        E_i(X, Y) &amp;= (X-X_i)dX_i - (Y-Y_i)dY_i
    \end{aligned}
$$&lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;多边形内为正，多边形外为负，线上为0&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210928213747.png&quot; alt=&quot;20210928213747&quot; height=&quot;200px&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dl.acm.org/doi/pdf/10.1145/325334.325205&quot;&gt;Fast Spheres, Shadows, Textures, Transparencies, and Image Enhancements in Pixel-Planes&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/SIGGRAPH-1985-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-266-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;主要描述硬件渲染技术&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210928212842.png&quot; alt=&quot;20210928212842&quot; height=&quot;200px&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦丽素</name></author><category term="3d" /><summary type="html">OpenMVS[Homogeneous Coordinate]</summary></entry><entry><title type="html">Minimum bounding box [MBB]</title><link href="https://ucas.io/3d/Minimum-bounding-box-MBB/" rel="alternate" type="text/html" title="Minimum bounding box [MBB]" /><published>2021-09-27T14:57:40+08:00</published><updated>2021-09-27T14:57:40+08:00</updated><id>https://ucas.io/3d/Minimum-bounding-box-%5BMBB%5D</id><content type="html" xml:base="https://ucas.io/3d/Minimum-bounding-box-MBB/">&lt;h2 id=&quot;mbb-最小包围盒-minimum-bounding-box&quot;&gt;MBB 最小包围盒 [Minimum bounding box]&lt;/h2&gt;

&lt;h3 id=&quot;aabb-轴对齐包围盒-axis-aligned-minimum-bounding-box&quot;&gt;AABB 轴对齐包围盒 [Axis-aligned minimum bounding box]&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;when the model is rotated they cannot be simply rotated with it, but need to be recomputed.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927212832.png&quot; alt=&quot;20210927212832&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;kdmath&quot;&gt;$$
\begin{aligned}
  P_{min} &amp;= [x_{min},y_{min},z_{min}]\\
  P_{max} &amp;= [x_{max},y_{max},z_{max}]
\end{aligned}
$$&lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;obb-有向围盒-oriented-minimum-bounding-box&quot;&gt;OBB 有向围盒 [Oriented minimum bounding box]&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927215723.png&quot; alt=&quot;20210927215723&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;其中
    &lt;ul&gt;
      &lt;li&gt;$C$: Center Point&lt;/li&gt;
      &lt;li&gt;$\mathbf{u, v, w}$: three unit vectors orthornormal basis&lt;/li&gt;
      &lt;li&gt;$h_u, h_v, h_w$: three scalars representing half the dimension in each directions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Arbitrarily oriented minimum bounding box&lt;/li&gt;
  &lt;li&gt;Object-oriented minimum bounding box&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dop-离散定向多面体-discrete-oriented-polyhedra&quot;&gt;DOP 离散定向多面体 [Discrete Oriented Polyhedra]&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;A k-DOP is the Boolean intersection of extents along k directions. Thus, a k-DOP is the Boolean intersection of k bounding slabs and is a convex polytope containing the object&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intersection-checks&quot;&gt;Intersection checks&lt;/h2&gt;

&lt;h3 id=&quot;oriented-bounding-box-and-orthogonal-frustum-obb-和-方平截头体-正交平截头体&quot;&gt;Oriented Bounding Box and Orthogonal Frustum [OBB 和 方平截头体, 正交平截头体]&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Orthogonal Frustum, usually is the viewing frustum[视体]
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/0/02/ViewFrustum.svg&quot; height=&quot;200px&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927230250.png&quot; alt=&quot;20210927230250&quot; height=&quot;400px&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Method of Separating Axes [分离轴定理]
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hyperplane_separation_theorem&quot;&gt;Hyperplane separation theorem - Wikipidea&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.sevenson.com.au/programming/sat/&quot;&gt;Separating Axis Theorem (SAT) Explanation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/yorhomwang/article/details/54869018&quot;&gt;碰撞检测之分离轴定理算法讲解 - CSDN&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927222129.png&quot; alt=&quot;20210927222129&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;取一条边，做每个点在其法向上的投影，对每个形状取最大值和最小值作为投影范围，判断投影是否相交即可，如果投影不想交，则两个图形必然不想交，否则继续迭代下一个边，如果所有的边都相交，则物体相交&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;本方法只适用于凸多面体&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;difficult problem is selecting a finite set of line directions such that the intersection/nonintersection can be determined by separating axis tests using only vectors in that set&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;ul&gt;
          &lt;li&gt;减少需要迭代的边可以提高运行速度&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;For &lt;strong&gt;convex polyhedra&lt;/strong&gt; it turns out that the set consisting of face normals for the two polyhedra and vectors that are the &lt;strong&gt;cross product of edges&lt;/strong&gt;, one edge from each polyhedron, is sufficient for the intersection testing.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;对于一个多面体$i$，有$F_i, E_i$个面和边，需要检测的直线总量为$F_0+F_1+E_0E_1$&lt;/li&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;It is possible that some of the vectors formed by cross products
of edges are zero, in which case they &lt;strong&gt;do not need to be tested&lt;/strong&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;ul&gt;
          &lt;li&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OBB&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OF&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;OBB: $F=3, E=3$&lt;/li&gt;
              &lt;li&gt;OF: $F=5, E=6$&lt;/li&gt;
              &lt;li&gt;The total number of vectors to test is $26$&lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;Caching Intermediate Results to make an optimized implementation&lt;/strong&gt;&lt;/li&gt;
              &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927230617.png&quot; alt=&quot;20210927230617&quot; /&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;AABB: $F=3, E=3$&lt;/li&gt;
              &lt;li&gt;The total number of vectors to test is $3+3+3*3=15$&lt;/li&gt;
              &lt;li&gt;The set has only &lt;strong&gt;three nonzero vectors&lt;/strong&gt;.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OBB&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OBB&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;OBB: $F=3, E=3$&lt;/li&gt;
              &lt;li&gt;Total: $3 + 3+ 3*3=15$&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;平面与包围盒的相交测试&quot;&gt;平面与包围盒的相交测试&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;对角线判定法
    &lt;ul&gt;
      &lt;li&gt;利用了平面与包围盒相交，则它必定与包围盒的一条对角线相交这个性质，所以只要找到那条对角线，把它的两个顶点代入平面的方程中，判断求解的结果的符号即可&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;距离判定法
    &lt;ul&gt;
      &lt;li&gt;是通过对比投影半长与包围盒中心到平面的距离来判定是否相交&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;射线与包围盒的相交测试&quot;&gt;射线与包围盒的相交测试&lt;/h2&gt;

&lt;h2 id=&quot;openmvs距离判定法&quot;&gt;OpenMVS[距离判定法?]&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Culls AABB to n sided frustum. Normals pointing outwards.
 * -&amp;gt; IN:  AABB    - bounding box to be tested
 *    OUT: VISIBLE - aabb totally inside frustum
 *         CLIPPED - aabb clipped by frustum
 *         CULLED  - aabb totally outside frustum
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GCLASS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TFrustum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DIMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Classify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AABB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bIntersects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// find and test extreme points&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DIMS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PLANE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_planes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;POINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptPlaneMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptPlaneMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// x coordinate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// y coordinate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// z coordinate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ptPlaneMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptPlaneMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_fD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CULLED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptPlaneMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_fD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bIntersects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// for&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bIntersects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLIPPED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VISIBLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sciencedirect.com/book/9781558605947/geometric-tools-for-computer-graphics&quot;&gt;Geometric Tools for Computer Graphics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/Book-2002-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-880-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/156750299&quot;&gt;平面与包围盒的相交测试 - chopper的文章 - 知乎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/138259656&quot;&gt;射线与包围盒的相交测试 - chopper的文章 - 知乎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.taylorfrancis.com/books/mono/10.1201/b22086/real-time-rendering-fourth-edition-tomas-akenine-mo%C2%A8ller-eric-haines-naty-hoffman?context=ubx&amp;amp;refId=579e65e7-e3e8-45ea-b45b-317d05c7fb79&quot;&gt;Real-time rendering 1999[1],2002[2],2008[3],2018[4]&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/Book-2018-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-2782-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦丽素</name></author><category term="3d" /><summary type="html">MBB 最小包围盒 [Minimum bounding box]</summary></entry><entry><title type="html">Operator For Image</title><link href="https://ucas.io/3d/Operator-For-Image/" rel="alternate" type="text/html" title="Operator For Image" /><published>2021-09-27T14:57:40+08:00</published><updated>2021-09-27T14:57:40+08:00</updated><id>https://ucas.io/3d/Operator-For-Image</id><content type="html" xml:base="https://ucas.io/3d/Operator-For-Image/">&lt;h2 id=&quot;sobel-operator---1968-索伯算子-索贝尔算子&quot;&gt;Sobel Operator - 1968 [索伯算子, 索贝尔算子]&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/publication/239398674_An_Isotropic_3x3_Image_Gradient_Operator&quot;&gt;Paper - An Isotropic 3x3 Image Gradient Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/profile/Irwin-Sobel/publication/239398674_An_Isotropic_3x3_Image_Gradient_Operator/links/557e06f508aeea18b777c389/An-Isotropic-3x3-Image-Gradient-Operator.pdf&quot;&gt;Paper.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Formula
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div class=&quot;kdmath&quot;&gt;$$
\begin{aligned}
        G_x &amp;= \begin{bmatrix}
            +1&amp;0&amp;-1\\+2&amp;0&amp;-2\\+1&amp;0&amp;-1\\
        \end{bmatrix} * IMG\\
        G_y &amp;= \begin{bmatrix}
            +1&amp;+2&amp;+1\\0&amp;0&amp;0\\-1&amp;-2&amp;-1\\
        \end{bmatrix} * IMG\\
        G &amp;= \sqrt{G_x^2 + G_y^2}\\
        \Theta &amp;= \arctan(\frac{G_y}{G_x})=atan2(G_x, G_y)
    \end{aligned}
$$&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OpenMvs
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927200240.png&quot; alt=&quot;20210927200240&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Related
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/B9780080515816500271&quot;&gt;Digital step edges from zero crossing of second directional derivatives&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/B9780080515816500271?via%3Dihub&quot;&gt;Paper.pdf&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/TPAMI-1987-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-1690-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927160347.png&quot; alt=&quot;20210927160347&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927162819.png&quot; alt=&quot;20210927162819&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scharr-operatorfilter---2000-沙尔算子&quot;&gt;Scharr Operator(Filter) - 2000 [沙尔算子]&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/publication/36148383_Optimal_operators_in_digital_image_processing_Elektronische_Ressource&quot;&gt;Paper written in German - Optimal operators in digital image processing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/Phd_thesis-2000-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-145-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/profile/Hanno-Scharr/publication/36148383_Optimal_operators_in_digital_image_processing_Elektronische_Ressource/links/54257c130cf238c6ea741031/Optimal-operators-in-digital-image-processing-Elektronische-Ressource.pdf&quot;&gt;Paper.pdf&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sobel Operator&lt;/code&gt; does not exhibit a good rotational symmetry (about 1° of error)&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scharr filter&lt;/code&gt; results in a less rotational variance than the Sobel filter &lt;a href=&quot;https://scikit-image.org/docs/dev/auto_examples/edges/plot_edge_filter.html&quot;&gt;scikit - edge filter&lt;/a&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;kdmath&quot;&gt;$$
\begin{aligned}
        \alpha_{1,ref}(\mathbf{\tilde{k}})&amp;=\arctan(\frac{\tilde{k_y}}{\tilde{k_x}})\\
        \alpha_{1}(\mathbf{\tilde{k},d})&amp;=\arctan(\frac{\hat{D}_y}{\hat{D}_x})\\
        d(\mathbf{\tilde{k,d}})&amp;=\alpha_{1}(\mathbf{\tilde{k},d}) - \alpha_{1,ref}(\mathbf{\tilde{k}})
    \end{aligned}
$$&lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927184146.png&quot; alt=&quot;20210927184146&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Formula
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div class=&quot;kdmath&quot;&gt;$$
\begin{aligned}
        G_x &amp;= \begin{bmatrix}
            +3&amp;0&amp;-3\\+10&amp;0&amp;-10\\+3&amp;0&amp;-3\\
        \end{bmatrix} * IMG\\
        G_y &amp;= \begin{bmatrix}
            +3&amp;+10&amp;+3\\0&amp;0&amp;0\\-3&amp;-10&amp;-3\\
        \end{bmatrix} * IMG\\
        G &amp;= \sqrt{G_x^2 + G_y^2}\\
        \Theta &amp;= \arctan(\frac{G_y}{G_x})=atan2(G_x, G_y)
    \end{aligned}
$$&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927185639.png&quot; alt=&quot;20210927185639&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927185750.png&quot; alt=&quot;20210927185750&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prewitt-operator---1970-普鲁伊特算子&quot;&gt;Prewitt operator - 1970 [普鲁伊特算子]&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://books.google.com/books?hl=zh-CN&amp;amp;lr=&amp;amp;id=vp-w_pC9JBAC&amp;amp;oi=fnd&amp;amp;pg=PA75&amp;amp;dq=Object+Enhancement+and+Extraction&amp;amp;ots=sAD85lrCIa&amp;amp;sig=NIFwSGOQDOSebsLUcKx9PIwKFOM#v=onepage&amp;amp;q=Object%20Enhancement%20and%20Extraction&amp;amp;f=false&quot;&gt;Book - Object Enhancement and Extraction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/Book-1970-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-2151-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Formula
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div class=&quot;kdmath&quot;&gt;$$
\begin{aligned}
        G_x &amp;= \begin{bmatrix}
            +1&amp;0&amp;-1\\+1&amp;0&amp;-1\\+1&amp;0&amp;-1\\
        \end{bmatrix} * IMG\\
        G_y &amp;= \begin{bmatrix}
            +1&amp;+1&amp;+1\\0&amp;0&amp;0\\-1&amp;-1&amp;-1\\
        \end{bmatrix} * IMG\\
        G &amp;= \sqrt{G_x^2 + G_y^2}\\
        \Theta &amp;= \arctan(\frac{G_y}{G_x})=atan2(G_x, G_y)
    \end{aligned}
$$&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Related
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.cqvip.com/qk/84018x/200921/32051803.html&quot;&gt;一种改进的图像边缘检测算法💩🤮&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/科学技术与工程-2009-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-5-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://awsdownload.cqvip.com/downloadpaper/api/v1/pdf/stream/2009/32051803?infos=RkFFREVHRk1FQkFNRkdGSEFMQUdBSUZIRkNCRkZFQURBTEFMQk5BQkFDQU5BQUJPQUxBQUZDQU5CTUFNRkZBQUFIQUhGQkFDQUlGTEZGRkZGQ0JOQUNBRkFCQUJCUEFBQUJBQ0FGQUVBSkFJQURCTUFDQUxBQkFGQUFBQkFCQUdCTUFFQlBBRkJPQkhBQ0FEQUJBREJOQUZBSUJGQUNBRUJEQURBSkFQQURBT0FLQUhBQUJORkVGR0ZDRk1BRkFMQUVBS0FJRkJBR0ZPQUJGQUFLQUFGQ0FFQUZBQkZFRkFGQ0FBRkRGR0ZEQUxBQUFMQUFBS0JQQUZCT0FJ&amp;amp;clientID=cqvip4fd848bc-d089-4350-82b8-4e345a79cefa&amp;amp;fileName=%e4%b8%80%e7%a7%8d%e6%94%b9%e8%bf%9b%e7%9a%84%e5%9b%be%e5%83%8f%e8%be%b9%e7%bc%98%e6%a3%80%e6%b5%8b%e7%ae%97%e6%b3%95.pdf&amp;amp;algorithm=0&quot;&gt;Paper.pdf&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927193452.png&quot; alt=&quot;20210927193452&quot; height=&quot;400px&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;roberts-cross-罗伯茨算子&quot;&gt;Roberts cross [罗伯茨算子]&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dspace.mit.edu/bitstream/handle/1721.1/11589/33959125-MIT.pdf&quot;&gt;Machine Perception Of Three-Dimensional Solids&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://img.shields.io/badge/MIT-1963-blue?style=flat-square&quot; alt=&quot;j&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/cite-2971-blue?style=flat-square&quot; alt=&quot;cite&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Formula
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div class=&quot;kdmath&quot;&gt;$$
\begin{aligned}
        G_x &amp;= \begin{bmatrix}
            +1&amp;0\\0&amp;-1
        \end{bmatrix} * IMG\\
        G_y &amp;= \begin{bmatrix}
            0&amp;+1\\-1&amp;0
        \end{bmatrix} * IMG\\
        G &amp;= \sqrt{G_x^2 + G_y^2}\\
        \Theta &amp;= \arctan(\frac{G_y}{G_x})-\frac{3\pi}{4}
    \end{aligned}
$$&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compare-of-them&quot;&gt;Compare of them&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210927195227.png&quot; alt=&quot;20210927195227&quot; /&gt;&lt;/p&gt;</content><author><name>麦丽素</name></author><category term="3d" /><summary type="html">Sobel Operator - 1968 [索伯算子, 索贝尔算子]</summary></entry><entry><title type="html">OpenMVS Texture code reading</title><link href="https://ucas.io/3d/OpenMVS-Texture-Code-Reading/" rel="alternate" type="text/html" title="OpenMVS Texture code reading" /><published>2021-09-26T19:51:42+08:00</published><updated>2021-09-26T19:51:42+08:00</updated><id>https://ucas.io/3d/OpenMVS%20-Texture-Code-Reading</id><content type="html" xml:base="https://ucas.io/3d/OpenMVS-Texture-Code-Reading/">&lt;ul&gt;
  &lt;li&gt;TextureMesh
    &lt;ul&gt;
      &lt;li&gt;FaceViewSelection
        &lt;ul&gt;
          &lt;li&gt;ListVertexFaces✔️ // extract array of triangles incident to each vertex
            &lt;ul&gt;
              &lt;li&gt;EmptyExtra✔️&lt;/li&gt;
              &lt;li&gt;ListIncidenteFaces✔️&lt;/li&gt;
              &lt;li&gt;ListBoundaryVertices✔️, // 边界点检查，在面中，只使用了1次的点是边界点，另外，代码中假设每个点通常不会超过12个面使用
                &lt;ul&gt;
                  &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210926235332.png&quot; alt=&quot;20210926235332&quot; /&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;// create texture patches✔️
            &lt;ul&gt;
              &lt;li&gt;ListCameraFaces // list all views for each face
                &lt;ul&gt;
                  &lt;li&gt;//create vertices &lt;strong&gt;octree&lt;/strong&gt; of vertices✔️&lt;/li&gt;
                  &lt;li&gt;//extract array of faces viewed by each image✔️
                    &lt;ul&gt;
                      &lt;li&gt;//compute gradient magnitude✔️&lt;/li&gt;
                      &lt;li&gt;//select faces inside view frustum✔️
                        &lt;ul&gt;
                          &lt;li&gt;plane with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB&lt;/code&gt;✔️&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;// project all triangles in this view and keep the closest ones
                        &lt;ul&gt;
                          &lt;li&gt;// skip face if not completely inside✔️
                            &lt;ul&gt;
                              &lt;li&gt;using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransformPointW2C&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransformPointC2I&lt;/code&gt; to check the point is in image plane, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenMVS&lt;/code&gt; use 3 pixel as border width ✔️&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/li&gt;
                          &lt;li&gt;// skip face if the (cos) angle between the view to face vector and the view direction is negative✔️
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(faceCenter.z &amp;lt;= REAL(0))&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faceCenter.dot(normalPlane) &amp;gt;= ZEROTOLERANCE&amp;lt;REAL&amp;gt;()&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/li&gt;
                          &lt;li&gt;// draw triangle and for each pixel compute depth as the ray intersection with the plane✔️
                            &lt;ul&gt;
                              &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Advanced Rasterization&lt;/code&gt;&lt;/strong&gt; by Nick (Nicolas Capens) 2004&lt;/li&gt;
                              &lt;li&gt;&lt;a href=&quot;https://forum.beyond3d.com/threads/advanced-rasterization.12507/&quot;&gt;Advanced Rasterization&lt;/a&gt;🤔&lt;/li&gt;
                              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libs/Common/Types.inl:2474/TImage&amp;lt;TYPE&amp;gt;::RasterizeTriangle&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;strong&gt;OpenMVS: Using block size eq 8, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Half-Space&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;// compute the projection area of visible faces
                        &lt;ul&gt;
                          &lt;li&gt;遍历照片上的像素，获取最近的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;face&lt;/code&gt;最近的view, 计算&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;face&lt;/code&gt;颜色均值✔️&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(fOutlierThreshold &amp;gt; 0)&lt;/code&gt; // try to detect outlier views for each face
                        &lt;ul&gt;
                          &lt;li&gt;取face 3个通道的均色，对均色做多元正太分布计算，如果偏差大于阈值，则视为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outlier&lt;/code&gt;✔️
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LU分解&lt;/code&gt;取逆&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;// create faces graph✔️
                &lt;ul&gt;
                  &lt;li&gt;遍历&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;face&lt;/code&gt;以及面的邻接&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faceAdj&lt;/code&gt;, 若一个可见，一个不可见，则增加&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seam&lt;/code&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;// assign the best view to each face✔️
                &lt;ul&gt;
                  &lt;li&gt;// find connected components✔️
                    &lt;ul&gt;
                      &lt;li&gt;根据前面计算的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;face&lt;/code&gt;邻接关系计算连通图&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// map face ID from global to component space✔️
                    &lt;ul&gt;
                      &lt;li&gt;为每个面计算连通图的新id，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;component1: [1,2,3,...,c1], component2: [1,2,3,...,c2]&lt;/code&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// normalize quality values✔️
                    &lt;ul&gt;
                      &lt;li&gt;计算图片质量[二阶导积分]的95分位置近似值&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// initialize inference structures✔️
                    &lt;ul&gt;
                      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numNodes&lt;/code&gt;=连通图face的数量，如果数量小于等于1，则忽略&lt;/li&gt;
                      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SmoothCost&lt;/code&gt;=0[if node eq]~1000&lt;/li&gt;
                      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Neighbors&lt;/code&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// set data costs✔️
                    &lt;ul&gt;
                      &lt;li&gt;// set costs for label 0 (undefined)✔️
                        &lt;ul&gt;
                          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataCost = fRatioDataSmoothness * 1000&lt;/code&gt; for min of all labels&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;// set data costs for all labels (except label 0 - undefined)✔️
                        &lt;ul&gt;
                          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataCost =&lt;/code&gt; $\big(1-\max(1, \frac{quality}{quality_{p95}})\big)*1000$&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;Label = 0, 未定义，label &amp;gt;= 1是指其他图片✔️&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// assign the optimal view (label) to each face✔️
                    &lt;ul&gt;
                      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optimize&lt;/code&gt; 优化单位是连通图✔️
                        &lt;ul&gt;
                          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComputeEnergy&lt;/code&gt;✔️
                            &lt;ul&gt;
                              &lt;li&gt;$\sum{cost_{data}} + \sum(cost_{edge})$&lt;/li&gt;
                              &lt;li&gt;$cost_{edge} = 1000$ if label is not equal&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/li&gt;
                          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optimize(n=1)&lt;/code&gt;✔️
                            &lt;ul&gt;
                              &lt;li&gt;for(n times)
                                &lt;ul&gt;
                                  &lt;li&gt;计算每个面在选择不同&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;时得到的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minEnergy&lt;/code&gt;&lt;/li&gt;
                                  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Swap&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newMsgs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oldMsgs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oldMsgs - min(oldMsgs)&lt;/code&gt;&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/li&gt;
                              &lt;li&gt;更新选择的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataCost&lt;/code&gt;✔️&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/li&gt;
                          &lt;li&gt;根据能量差分提前返回✔️&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// extract resulting labeling✔️
                    &lt;ul&gt;
                      &lt;li&gt;label-1，调整索引&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;// create texture patches✔️
                &lt;ul&gt;
                  &lt;li&gt;// divide graph in sub-graphs of connected faces having the same label✔️
                    &lt;ul&gt;
                      &lt;li&gt;计算图片不一致的边缝&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;，对于相邻一侧无label的也作为边缝&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;&lt;/li&gt;
                      &lt;li&gt;去掉&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;的连通边&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// find connected components: texture patches✔️
                    &lt;ul&gt;
                      &lt;li&gt;计算新的连通图&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// last texture patch contains all faces with no texture✔️
                    &lt;ul&gt;
                      &lt;li&gt;每个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Texture&lt;/code&gt; 收集每个连通体的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;face&lt;/code&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// remove all patches with invalid label (except the last one) and create the map from the old index to the new one✔️&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;GenerateTexture
        &lt;ul&gt;
          &lt;li&gt;// project patches in the corresponding view and compute texture-coordinates and bounding-box&lt;/li&gt;
          &lt;li&gt;// project vertices and compute bounding-box✔️
            &lt;ul&gt;
              &lt;li&gt;对每个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patch&lt;/code&gt;的面映射到图片中后，算一个2d的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aabb&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;// compute relative texture coordinates✔️
            &lt;ul&gt;
              &lt;li&gt;计算offset，修改相应的坐标&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;// init last patch to point to a small uniform color patch✔️
            &lt;ul&gt;
              &lt;li&gt;默认纹理位置&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;// perform seam leveling
            &lt;ul&gt;
              &lt;li&gt;// create seam vertices and edges✔️&lt;/li&gt;
              &lt;li&gt;// perform global seam leveling🤔
                &lt;ul&gt;
                  &lt;li&gt;利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConjugateGradient&lt;/code&gt;求解&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tikhonov's Gamma matrix&lt;/code&gt;使得全局颜色差分较小的新解&lt;/li&gt;
                  &lt;li&gt;// find the patch ID for each vertex✔️
                    &lt;ul&gt;
                      &lt;li&gt;对点赋值patch_id，边缝点使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;idxSeamVertex&lt;/code&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// assign a row index within the solution vector x to each vertex/patch✔️
                    &lt;ul&gt;
                      &lt;li&gt;生成一个patch数组&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertpatch2rows&lt;/code&gt;, 行号为点索引，二阶索引为patch，对于单个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patch&lt;/code&gt;的点，只赋值一个patch，对于边缝点多个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patch&lt;/code&gt;的点，赋多个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patch&lt;/code&gt;，值为递增值&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rowsX&lt;/code&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;// fill Tikhonov’s Gamma matrix (regularization constraints)✔️&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;// perform local seam leveling✔️
                &lt;ul&gt;
                  &lt;li&gt;优化&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patch&lt;/code&gt;间的线条颜色&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;// merge texture patches with overlapping rectangles
            &lt;ul&gt;
              &lt;li&gt;// translate texture coordinates&lt;/li&gt;
              &lt;li&gt;// join faces lists&lt;/li&gt;
              &lt;li&gt;// remove the small patch&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;// create texture
            &lt;ul&gt;
              &lt;li&gt;// arrange texture patches to fit the smallest possible texture image&lt;/li&gt;
              &lt;li&gt;// increase texture size till all patches fit&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;// create texture image
            &lt;ul&gt;
              &lt;li&gt;// copy patch image
                &lt;ul&gt;
                  &lt;li&gt;// flip patch and texture-coordinates&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;// compute final texture coordinates
                &lt;ul&gt;
                  &lt;li&gt;// translate, normalize and flip Y axis&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦丽素</name></author><category term="3d" /><summary type="html">TextureMesh FaceViewSelection ListVertexFaces✔️ // extract array of triangles incident to each vertex EmptyExtra✔️ ListIncidenteFaces✔️ ListBoundaryVertices✔️, // 边界点检查，在面中，只使用了1次的点是边界点，另外，代码中假设每个点通常不会超过12个面使用 // create texture patches✔️ ListCameraFaces // list all views for each face //create vertices octree of vertices✔️ //extract array of faces viewed by each image✔️ //compute gradient magnitude✔️ //select faces inside view frustum✔️ plane with AABB✔️ // project all triangles in this view and keep the closest ones // skip face if not completely inside✔️ using TransformPointW2C and TransformPointC2I to check the point is in image plane, OpenMVS use 3 pixel as border width ✔️ // skip face if the (cos) angle between the view to face vector and the view direction is negative✔️ (faceCenter.z &amp;lt;= REAL(0)) faceCenter.dot(normalPlane) &amp;gt;= ZEROTOLERANCE&amp;lt;REAL&amp;gt;() // draw triangle and for each pixel compute depth as the ray intersection with the plane✔️ Advanced Rasterization by Nick (Nicolas Capens) 2004 Advanced Rasterization🤔 libs/Common/Types.inl:2474/TImage&amp;lt;TYPE&amp;gt;::RasterizeTriangle OpenMVS: Using block size eq 8, and Half-Space // compute the projection area of visible faces 遍历照片上的像素，获取最近的face最近的view, 计算face颜色均值✔️ (fOutlierThreshold &amp;gt; 0) // try to detect outlier views for each face 取face 3个通道的均色，对均色做多元正太分布计算，如果偏差大于阈值，则视为outlier✔️ LU分解取逆 // create faces graph✔️ 遍历face以及面的邻接faceAdj, 若一个可见，一个不可见，则增加seam // assign the best view to each face✔️ // find connected components✔️ 根据前面计算的face邻接关系计算连通图 // map face ID from global to component space✔️ 为每个面计算连通图的新id，component1: [1,2,3,...,c1], component2: [1,2,3,...,c2] // normalize quality values✔️ 计算图片质量[二阶导积分]的95分位置近似值 // initialize inference structures✔️ numNodes=连通图face的数量，如果数量小于等于1，则忽略 SmoothCost=0[if node eq]~1000 Neighbors // set data costs✔️ // set costs for label 0 (undefined)✔️ dataCost = fRatioDataSmoothness * 1000 for min of all labels // set data costs for all labels (except label 0 - undefined)✔️ dataCost = $\big(1-\max(1, \frac{quality}{quality_{p95}})\big)*1000$ Label = 0, 未定义，label &amp;gt;= 1是指其他图片✔️ // assign the optimal view (label) to each face✔️ Optimize 优化单位是连通图✔️ ComputeEnergy✔️ $\sum{cost_{data}} + \sum(cost_{edge})$ $cost_{edge} = 1000$ if label is not equal Optimize(n=1)✔️ for(n times) 计算每个面在选择不同label时得到的minEnergy Swap newMsgs and oldMsgs, oldMsgs - min(oldMsgs) 更新选择的label和dataCost✔️ 根据能量差分提前返回✔️ // extract resulting labeling✔️ label-1，调整索引 // create texture patches✔️ // divide graph in sub-graphs of connected faces having the same label✔️ 计算图片不一致的边缝A，对于相邻一侧无label的也作为边缝B 去掉A的连通边 // find connected components: texture patches✔️ 计算新的连通图 // last texture patch contains all faces with no texture✔️ 每个Texture 收集每个连通体的face // remove all patches with invalid label (except the last one) and create the map from the old index to the new one✔️ GenerateTexture // project patches in the corresponding view and compute texture-coordinates and bounding-box // project vertices and compute bounding-box✔️ 对每个patch的面映射到图片中后，算一个2d的aabb // compute relative texture coordinates✔️ 计算offset，修改相应的坐标 // init last patch to point to a small uniform color patch✔️ 默认纹理位置 // perform seam leveling // create seam vertices and edges✔️ // perform global seam leveling🤔 利用ConjugateGradient求解Tikhonov's Gamma matrix使得全局颜色差分较小的新解 // find the patch ID for each vertex✔️ 对点赋值patch_id，边缝点使用idxSeamVertex // assign a row index within the solution vector x to each vertex/patch✔️ 生成一个patch数组vertpatch2rows, 行号为点索引，二阶索引为patch，对于单个patch的点，只赋值一个patch，对于边缝点多个patch的点，赋多个patch，值为递增值rowsX // fill Tikhonov’s Gamma matrix (regularization constraints)✔️ // perform local seam leveling✔️ 优化patch间的线条颜色 // merge texture patches with overlapping rectangles // translate texture coordinates // join faces lists // remove the small patch // create texture // arrange texture patches to fit the smallest possible texture image // increase texture size till all patches fit // create texture image // copy patch image // flip patch and texture-coordinates // compute final texture coordinates // translate, normalize and flip Y axis</summary></entry><entry><title type="html">Build and run TextureMesh at UCAS machine</title><link href="https://ucas.io/3d/Build-And-Run-TextureMesh-at-UCAS-machine/" rel="alternate" type="text/html" title="Build and run TextureMesh at UCAS machine" /><published>2021-09-24T18:23:30+08:00</published><updated>2021-09-24T18:23:30+08:00</updated><id>https://ucas.io/3d/Build-And-Run-TextureMesh-at-UCAS-machine</id><content type="html" xml:base="https://ucas.io/3d/Build-And-Run-TextureMesh-at-UCAS-machine/">&lt;h2 id=&quot;reinstall-vcpkg-at-xps&quot;&gt;Reinstall vcpkg at xps&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Just remove vcpkg directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compile-and-build-texture_extract-at-xps-machine&quot;&gt;Compile and Build Texture_extract at xps machine&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The files need change&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210924182630.png&quot; alt=&quot;20210924182630&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;Copy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextureMesh&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextureMesh_extract&lt;/code&gt;, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextureMesh&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextureMesh_extract&lt;/code&gt; at the same time
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210924182810.png&quot; alt=&quot;20210924182810&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextureMesh_extract.cpp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interfaceCamera.hpp&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210924182913.png&quot; alt=&quot;20210924182913&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210924182926.png&quot; alt=&quot;20210924182926&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x64&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;same-example-after-texture&quot;&gt;Same example after texture&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;original
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210924184348.png&quot; alt=&quot;20210924184348&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HC-lap-smooth
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210924184427.png&quot; alt=&quot;20210924184427&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gussian
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210924184454.png&quot; alt=&quot;20210924184454&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;detail&quot;&gt;Detail&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;xps result
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210916232251.png&quot; alt=&quot;20210916232251&quot; height=&quot;100px&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ucas machine result
    &lt;ul&gt;
      &lt;li&gt;the blue mesh has gone&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210924191016.png&quot; alt=&quot;20210924191016&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;code compare of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SceneTexture.cpp&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Left is the code from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;liuchao&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Right is the newest from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenMVS.git&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210924191117.png&quot; alt=&quot;20210924191117&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦丽素</name></author><category term="3d" /><summary type="html">Reinstall vcpkg at xps</summary></entry><entry><title type="html">Clion Debug</title><link href="https://ucas.io/3d/Clion-Debug/" rel="alternate" type="text/html" title="Clion Debug" /><published>2021-09-23T16:24:52+08:00</published><updated>2021-09-23T16:24:52+08:00</updated><id>https://ucas.io/3d/Clion-Debug</id><content type="html" xml:base="https://ucas.io/3d/Clion-Debug/">&lt;h2 id=&quot;problem-list&quot;&gt;Problem List&lt;/h2&gt;

&lt;h3 id=&quot;windows-xps-build&quot;&gt;windows [xps] build&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;[ 75%] Linking CXX executable ..\..\bin\x86\InterfaceVisualSFM.exe
LINK: command &quot;... C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.4\lib\Win32\cuda.lib ...&quot; failed (exit code 1120) with the following output:
MVS.lib(Mesh.cpp.obj) : error LNK2001: 无法解析的外部符号 cuGetErrorString
MVS.lib(Mesh.cpp.obj) : error LNK2001: 无法解析的外部符号 cuGetErrorName
MVS.lib(Mesh.cpp.obj) : error LNK2001: 无法解析的外部符号 cuParamSetSize
MVS.lib(Mesh.cpp.obj) : error LNK2001: 无法解析的外部符号 cuFuncSetBlockShape
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Common.lib(CUDA.cpp.obj) : error LNK2001: 无法解析的外部符号 cuStreamWaitEvent
Common.lib(CUDA.cpp.obj) : error LNK2001: 无法解析的外部符号 cuModuleUnload
..\..\bin\x86\InterfaceVisualSFM.exe : fatal error LNK1120: 33 个无法解析的外部命令
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;consider it about cuda version
    &lt;ul&gt;
      &lt;li&gt;Download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CUDA Driver api&lt;/code&gt; &lt;a href=&quot;https://docs.nvidia.com/cuda/pdf/CUDA_Driver_API.pdf&quot;&gt;file.pdf&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210923163138.png&quot; alt=&quot;20210923163138&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dumpbin.exe&lt;/code&gt;&lt;/p&gt;

        &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;\dumpbin.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.4\lib\Win32\cuda.lib&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/symbols&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/exports&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;get list of function that exported by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cuda.lib&lt;/code&gt; file&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210923163629.png&quot; alt=&quot;20210923163629&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210923163648.png&quot; alt=&quot;20210923163648&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Dont how to fix it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Here a list about this issue
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/cdcseacave/openMVS/issues/147#issuecomment-263116200&quot;&gt;https://github.com/cdcseacave/openMVS/issues/147&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lcuda&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openMVS/libs/MVS/CMakeLists.txt&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;have tried, does not work, cause &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lcuda&lt;/code&gt; will by ignore under windows system&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/19981506/5587080&quot;&gt;how-to-let-cmake-find-cuda&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-DCUDA_TOOLKIT_ROOT_DIR=cuda_path_the_version_you_want&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;ATTATION&lt;/strong&gt;: for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-DCUDA_TOOLKIT_ROOT_DIR=&quot;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4&quot;&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;You need double slash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\&lt;/code&gt; at path&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;change-to-other-machineworkstation&quot;&gt;change to other machine[workstation]&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fixed&lt;/strong&gt;????!!!
    &lt;ul&gt;
      &lt;li&gt;Mayby too many difference cuda version at xps?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;By the way
    &lt;ul&gt;
      &lt;li&gt;need use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--use-cuda=0&lt;/code&gt; to disable gpu at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RefineMesh&lt;/code&gt; step&lt;/li&gt;
      &lt;li&gt;otherwise a gpu error message will by throw, but obviously, there is very enough memory at here.&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210923165608.png&quot; alt=&quot;20210923165608&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CUDA error: cuMemFree(pData) (CUDA_ERROR_ILLEGAL_ADDRESS (code 700) - an illegal memory access was encountered)&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A very shity result be generated here
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210923165954.png&quot; alt=&quot;20210923165954&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;set--dcmake_verbose_makefileboolon-at-cmake-config-at-clion&quot;&gt;Set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON&lt;/code&gt; at cmake config at Clion&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Here the ucas machine looks like&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;C:\PROGRA~2\MICROS~3\2019\ENTERP~1\VC\Tools\MSVC\1429~1.301\bin\Hostx86\x64\link.exe @CMakeFiles\DensifyPointCloud.dir\objects1.rsp /out:..\..\bin\x64\DensifyPointCloud.exe /implib:..\..\bin\x64\DensifyPointCloud.lib /pdb:
C:\workspace\workspace_3d\openMVS\cmake-build-release-visual-studio\bin\x64\DensifyPointCloud.pdb /version:0.0 /machine:x64 /INCREMENTAL:NO /LTCG /subsystem:console -LIBPATH:
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib -LIBPATH:
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\debug\lib ..\..\lib\x64\MVS.lib ..\..\lib\x64\Math.lib ..\..\lib\x64\IO.lib ..\..\lib\x64\Common.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\boost_iostreams-vc140-mt.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\boost_program_options-vc140-mt.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\boost_system-vc140-mt.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\boost_serialization-vc140-mt.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\boost_regex-vc140-mt.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_highgui.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_ml.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_objdetect.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_photo.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_stitching.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_video.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_calib3d.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_dnn.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_features2d.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_flann.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_videoio.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_imgcodecs.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_imgproc.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_core.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\libpng16.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\zlib.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\jpeg.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\tiff.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\lzma.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\zlib.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\jpeg.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\tiff.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\lzma.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\mpfr.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\gmp.lib 
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.4\lib\x64\cuda.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:..\..\bin\x64\DensifyPointCloud.exe.manifest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;and here is the xps machine&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;C:\PROGRA~2\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\Hostx86\x64\link.exe /nologo @CMakeFiles\DensifyPointCloud.dir\objects1.rsp /out:..\..\bin\x86\DensifyPointCloud.exe /implib:..\..\bin\x86\DensifyPointCloud.lib /pdb:
C:\workspace\workspace_3d\openMVS\cmake-build-release-visual-studio\bin\x86\DensifyPointCloud.pdb /version:0.0 /machine:x64 /INCREMENTAL:NO /LTCG /subsystem:console -LIBPATH:
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib -LIBPATH:
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\debug\lib ..\..\lib\x86\MVS.lib ..\..\lib\x86\Math.lib ..\..\lib\x86\IO.lib ..\..\lib\x86\Common.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\boost_iostreams-vc140-mt.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\boost_program_options-vc140-mt.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\boost_system-vc140-mt.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\boost_serialization-vc140-mt.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\boost_regex-vc140-mt.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_highgui.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_ml.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_objdetect.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_photo.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_stitching.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_video.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_calib3d.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_dnn.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_features2d.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_flann.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_videoio.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_imgcodecs.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_imgproc.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\opencv_core.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\libpng16.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\zlib.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\jpeg.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\tiff.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\lzma.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\zlib.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\jpeg.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\tiff.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\lzma.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\mpfr.lib 
C:\workspace\workspace_3d\vcpkg\installed\x64-windows\lib\gmp.lib 
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.4\lib\Win32\cuda.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:..\..\bin\x86\DensifyPointCloud.exe.manifest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;After file compare&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FavorMylikes/hackmd-note/img/img20210923184051.png&quot; alt=&quot;20210923184051&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;xps has a wrong target triplet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;todo&quot;&gt;TODO&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;still not figure it out how it happen, reinstalling vcpkg, wish it be helpful.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦丽素</name></author><category term="3d" /><summary type="html">Problem List</summary></entry></feed>